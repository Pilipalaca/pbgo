// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/chai2010/pbgo"

import (
	context "context"
	encoding_json "encoding/json"
	io "io"
	io_ioutil "io/ioutil"
	net_http "net/http"
	net_rpc "net/rpc"
	regexp "regexp"
	strings "strings"

	github_com_chai2010_pbgo "github.com/chai2010/pbgo"
	github_com_julienschmidt_httprouter "github.com/julienschmidt/httprouter"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_94a4fe56d0f5f7b4, []int{0}
}
func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (dst *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(dst, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type StaticFile struct {
	ContentType          string   `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentBody          []byte   `protobuf:"bytes,2,opt,name=content_body,json=contentBody,proto3" json:"content_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaticFile) Reset()         { *m = StaticFile{} }
func (m *StaticFile) String() string { return proto.CompactTextString(m) }
func (*StaticFile) ProtoMessage()    {}
func (*StaticFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_94a4fe56d0f5f7b4, []int{1}
}
func (m *StaticFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticFile.Unmarshal(m, b)
}
func (m *StaticFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticFile.Marshal(b, m, deterministic)
}
func (dst *StaticFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticFile.Merge(dst, src)
}
func (m *StaticFile) XXX_Size() int {
	return xxx_messageInfo_StaticFile.Size(m)
}
func (m *StaticFile) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticFile.DiscardUnknown(m)
}

var xxx_messageInfo_StaticFile proto.InternalMessageInfo

func (m *StaticFile) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *StaticFile) GetContentBody() []byte {
	if m != nil {
		return m.ContentBody
	}
	return nil
}

type Message struct {
	Value                string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Array                []int32           `protobuf:"varint,2,rep,packed,name=array,proto3" json:"array,omitempty"`
	Dict                 map[string]string `protobuf:"bytes,3,rep,name=dict,proto3" json:"dict,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subfiled             *String           `protobuf:"bytes,4,opt,name=subfiled,proto3" json:"subfiled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_94a4fe56d0f5f7b4, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Message) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Message) GetDict() map[string]string {
	if m != nil {
		return m.Dict
	}
	return nil
}

func (m *Message) GetSubfiled() *String {
	if m != nil {
		return m.Subfiled
	}
	return nil
}

func init() {
	proto.RegisterType((*String)(nil), "hello_pb.String")
	proto.RegisterType((*StaticFile)(nil), "hello_pb.StaticFile")
	proto.RegisterType((*Message)(nil), "hello_pb.Message")
	proto.RegisterMapType((map[string]string)(nil), "hello_pb.Message.DictEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = encoding_json.Marshal
var _ = net_rpc.Server{}
var _ = net_http.ListenAndServe
var _ = io.EOF
var _ = io_ioutil.ReadAll
var _ = regexp.Match
var _ = strings.Split
var _ = github_com_chai2010_pbgo.PopulateFieldFromPath
var _ = github_com_julienschmidt_httprouter.New

type HelloServiceInterface interface {
	Hello(in *String, out *String) error
	Echo(in *Message, out *Message) error
	Static(in *String, out *StaticFile) error
}

type HelloServiceGrpcInterface interface {
	Hello(ctx context.Context, in *String) (out *String, err error)
	Echo(ctx context.Context, in *Message) (out *Message, err error)
	Static(ctx context.Context, in *String) (out *StaticFile, err error)
}

func RegisterHelloService(srv *net_rpc.Server, x HelloServiceInterface) error {
	if _, ok := x.(*HelloServiceValidator); !ok {
		x = &HelloServiceValidator{HelloServiceInterface: x}
	}

	if err := srv.RegisterName("HelloService", x); err != nil {
		return err
	}
	return nil
}

type HelloServiceValidator struct {
	HelloServiceInterface
}

func (p *HelloServiceValidator) Hello(in *String, out *String) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.HelloServiceInterface.Hello(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

func (p *HelloServiceValidator) Echo(in *Message, out *Message) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.HelloServiceInterface.Echo(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

func (p *HelloServiceValidator) Static(in *String, out *StaticFile) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.HelloServiceInterface.Static(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

type HelloServiceClient struct {
	*net_rpc.Client
}

func DialHelloService(network, address string) (*HelloServiceClient, error) {
	c, err := net_rpc.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return &HelloServiceClient{Client: c}, nil
}

func (p *HelloServiceClient) Hello(in *String) (*String, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(String)
	if err := p.Client.Call("HelloService.Hello", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *HelloServiceClient) AsyncHello(in *String, out *String, done chan *net_rpc.Call) *net_rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &net_rpc.Call{
				ServiceMethod: "HelloService.Hello",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *net_rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"HelloService.Hello",
		in, out,
		done,
	)
}

func (p *HelloServiceClient) Echo(in *Message) (*Message, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(Message)
	if err := p.Client.Call("HelloService.Echo", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *HelloServiceClient) AsyncEcho(in *Message, out *Message, done chan *net_rpc.Call) *net_rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &net_rpc.Call{
				ServiceMethod: "HelloService.Echo",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *net_rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"HelloService.Echo",
		in, out,
		done,
	)
}

func (p *HelloServiceClient) Static(in *String) (*StaticFile, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(StaticFile)
	if err := p.Client.Call("HelloService.Static", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *HelloServiceClient) AsyncStatic(in *String, out *StaticFile, done chan *net_rpc.Call) *net_rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &net_rpc.Call{
				ServiceMethod: "HelloService.Static",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *net_rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"HelloService.Static",
		in, out,
		done,
	)
}

func HelloServiceHandler(svc HelloServiceInterface) net_http.Handler {
	var router = github_com_julienschmidt_httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("DELETE", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/hello/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("PATCH", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("POST", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/echo/:subfiled.value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   Message
				protoReply Message
			)

			for _, fieldPath := range re.FindAllString("/echo/:subfiled.value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Echo(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/static/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply StaticFile
			)

			for _, fieldPath := range re.FindAllString("/static/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Static(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			w.Header().Set("Content-Type", protoReply.ContentType)

			if _, err := w.Write(protoReply.ContentBody); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func HelloServiceGrpcHandler(
	ctx context.Context, svc HelloServiceGrpcInterface,
	annotateContext func(ctx context.Context, req *net_http.Request) (context.Context, error),
) net_http.Handler {
	var router = github_com_julienschmidt_httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("DELETE", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if annotateContext != nil {
				var err error
				ctx, err = annotateContext(ctx, r)
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/hello/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if annotateContext != nil {
				var err error
				ctx, err = annotateContext(ctx, r)
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("PATCH", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if annotateContext != nil {
				var err error
				ctx, err = annotateContext(ctx, r)
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("POST", "/hello",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if err := encoding_json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if annotateContext != nil {
				var err error
				ctx, err = annotateContext(ctx, r)
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/echo/:subfiled.value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   Message
				protoReply *Message
				err        error
			)

			for _, fieldPath := range re.FindAllString("/echo/:subfiled.value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if annotateContext != nil {
				var err error
				ctx, err = annotateContext(ctx, r)
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Echo(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/static/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *StaticFile
				err        error
			)

			for _, fieldPath := range re.FindAllString("/static/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if annotateContext != nil {
				var err error
				ctx, err = annotateContext(ctx, r)
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Static(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			w.Header().Set("Content-Type", protoReply.ContentType)

			if _, err := w.Write(protoReply.ContentBody); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_hello_94a4fe56d0f5f7b4) }

var fileDescriptor_hello_94a4fe56d0f5f7b4 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xd5, 0xc4, 0x49, 0xda, 0xde, 0xa4, 0x10, 0x46, 0x45, 0x44, 0x06, 0x21, 0xe3, 0x95, 0x17,
	0xc8, 0x2e, 0x2e, 0x08, 0xe4, 0x0d, 0x82, 0xd4, 0x50, 0xa1, 0x22, 0x21, 0xdb, 0xfb, 0xca, 0x8f,
	0x21, 0x1e, 0x31, 0x78, 0xac, 0xf1, 0xb4, 0x92, 0x3f, 0x92, 0x25, 0x1b, 0x3e, 0x82, 0x3f, 0x40,
	0x42, 0xe3, 0x47, 0x92, 0xca, 0x59, 0x64, 0x97, 0x73, 0xe6, 0x9c, 0x73, 0x1f, 0xb9, 0x86, 0x59,
	0x4e, 0x18, 0xe3, 0x76, 0x29, 0xb8, 0xe4, 0xf8, 0xb8, 0x01, 0x37, 0x65, 0xa2, 0x43, 0x99, 0xac,
	0x3b, 0xd6, 0x7c, 0x0e, 0xd3, 0x50, 0x0a, 0x5a, 0xac, 0xf1, 0x19, 0x4c, 0xee, 0x62, 0x76, 0x4b,
	0x96, 0xc8, 0x40, 0xd6, 0x49, 0xd0, 0x02, 0x33, 0x00, 0x08, 0x65, 0x2c, 0x69, 0xfa, 0x89, 0x32,
	0x82, 0x5f, 0xc0, 0x3c, 0xe5, 0x85, 0x24, 0x85, 0xbc, 0x91, 0x75, 0xd9, 0x4b, 0x67, 0x1d, 0x17,
	0xd5, 0xe5, 0x3d, 0x49, 0xc2, 0xb3, 0x7a, 0x39, 0x32, 0x90, 0x35, 0xdf, 0x48, 0x3e, 0xf2, 0xac,
	0x36, 0x7f, 0x21, 0x38, 0xfa, 0x4a, 0xaa, 0x2a, 0x5e, 0x93, 0xfd, 0x55, 0x15, 0x1b, 0x0b, 0x11,
	0x2b, 0xb7, 0x66, 0x4d, 0x82, 0x16, 0x60, 0x07, 0xc6, 0x19, 0x4d, 0xe5, 0x52, 0x33, 0x34, 0x6b,
	0xe6, 0x3e, 0xb5, 0xfb, 0x81, 0xec, 0x2e, 0xcc, 0xbe, 0xa4, 0xa9, 0xf4, 0x0b, 0x29, 0xea, 0xa0,
	0x11, 0xe2, 0x97, 0x70, 0x5c, 0xdd, 0x26, 0xdf, 0x29, 0x23, 0xd9, 0x72, 0x6c, 0x20, 0x6b, 0xe6,
	0x2e, 0xb6, 0xa6, 0x76, 0xec, 0x60, 0xa3, 0xd0, 0xdf, 0xc2, 0xc9, 0x26, 0x00, 0x2f, 0x40, 0xfb,
	0x41, 0xea, 0xae, 0x2b, 0xf5, 0x73, 0xdb, 0xe9, 0x68, 0xa7, 0x53, 0x6f, 0xf4, 0x0e, 0xb9, 0xbf,
	0x35, 0x98, 0x5f, 0xa9, 0xd8, 0x90, 0x88, 0x3b, 0x9a, 0x12, 0xcc, 0x60, 0xd2, 0x60, 0x3c, 0x28,
	0xa7, 0x0f, 0x18, 0xf3, 0xfd, 0x9f, 0xbf, 0xff, 0xae, 0x3d, 0x38, 0x75, 0x9a, 0x07, 0xc7, 0x6b,
	0x72, 0xf5, 0x69, 0x0b, 0xdd, 0x05, 0x4c, 0x2f, 0xfd, 0x6b, 0x3f, 0xf2, 0x71, 0xcf, 0x3c, 0x84,
	0xc9, 0xb7, 0x0f, 0xd1, 0xea, 0xaa, 0x27, 0xf0, 0x17, 0x18, 0xfb, 0x69, 0xce, 0xf1, 0xa3, 0xc1,
	0x42, 0xf4, 0x21, 0x65, 0x3e, 0x53, 0xe5, 0x9e, 0xc0, 0x63, 0x87, 0xa4, 0x39, 0x77, 0xbc, 0x7e,
	0x7a, 0xbb, 0x5d, 0x3c, 0x53, 0xe7, 0xa0, 0xfe, 0xee, 0x3d, 0xad, 0x9f, 0xed, 0x32, 0xfd, 0x49,
	0x98, 0x9e, 0xca, 0x7b, 0xe3, 0x5e, 0x80, 0xf6, 0xd9, 0x8f, 0xf0, 0x03, 0xa7, 0x6a, 0x9e, 0xfa,
	0x31, 0x4e, 0xbd, 0xdd, 0x7b, 0x31, 0xb7, 0x50, 0xdd, 0x06, 0x7e, 0x0d, 0x73, 0xb5, 0x32, 0x22,
	0x42, 0x29, 0x48, 0xfc, 0xf3, 0x90, 0x75, 0x9d, 0x23, 0xe5, 0x5a, 0x31, 0x4a, 0x0a, 0x79, 0xb8,
	0xcb, 0x42, 0xf8, 0x15, 0x1c, 0xad, 0xf2, 0xb8, 0x28, 0x08, 0x3b, 0xcc, 0x70, 0x8e, 0x92, 0x69,
	0xf3, 0x89, 0x5c, 0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x92, 0xb1, 0x61, 0x7f, 0x47, 0x03, 0x00,
	0x00,
}
