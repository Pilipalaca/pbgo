// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/chai2010/pbgo"

import "context"
import "encoding/json"
import "io"
import "io/ioutil"
import "net/rpc"
import "net/http"
import "regexp"
import "strings"

import "github.com/chai2010/pbgo"
import "github.com/julienschmidt/httprouter"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_c8da73ca06a54c79, []int{0}
}
func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (dst *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(dst, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type StaticFile struct {
	ContentType          string   `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentBody          []byte   `protobuf:"bytes,2,opt,name=content_body,json=contentBody,proto3" json:"content_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaticFile) Reset()         { *m = StaticFile{} }
func (m *StaticFile) String() string { return proto.CompactTextString(m) }
func (*StaticFile) ProtoMessage()    {}
func (*StaticFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_c8da73ca06a54c79, []int{1}
}
func (m *StaticFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticFile.Unmarshal(m, b)
}
func (m *StaticFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticFile.Marshal(b, m, deterministic)
}
func (dst *StaticFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticFile.Merge(dst, src)
}
func (m *StaticFile) XXX_Size() int {
	return xxx_messageInfo_StaticFile.Size(m)
}
func (m *StaticFile) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticFile.DiscardUnknown(m)
}

var xxx_messageInfo_StaticFile proto.InternalMessageInfo

func (m *StaticFile) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *StaticFile) GetContentBody() []byte {
	if m != nil {
		return m.ContentBody
	}
	return nil
}

type Message struct {
	Value                string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Array                []int32           `protobuf:"varint,2,rep,packed,name=array,proto3" json:"array,omitempty"`
	Dict                 map[string]string `protobuf:"bytes,3,rep,name=dict,proto3" json:"dict,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subfiled             *String           `protobuf:"bytes,4,opt,name=subfiled,proto3" json:"subfiled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_c8da73ca06a54c79, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Message) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Message) GetDict() map[string]string {
	if m != nil {
		return m.Dict
	}
	return nil
}

func (m *Message) GetSubfiled() *String {
	if m != nil {
		return m.Subfiled
	}
	return nil
}

func init() {
	proto.RegisterType((*String)(nil), "hello_pb.String")
	proto.RegisterType((*StaticFile)(nil), "hello_pb.StaticFile")
	proto.RegisterType((*Message)(nil), "hello_pb.Message")
	proto.RegisterMapType((map[string]string)(nil), "hello_pb.Message.DictEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = json.Marshal
var _ = http.ListenAndServe
var _ = io.EOF
var _ = ioutil.ReadAll
var _ = regexp.Match
var _ = strings.Split
var _ = pbgo.PopulateFieldFromPath
var _ = httprouter.New

type PBGOHelloServiceInterface interface {
	Hello(in *String, out *String) error
	Echo(in *Message, out *Message) error
	Static(in *String, out *StaticFile) error
}

type PBGOHelloServiceGrpcInterface interface {
	Hello(ctx context.Context, in *String) (out *String, err error)
	Echo(ctx context.Context, in *Message) (out *Message, err error)
	Static(ctx context.Context, in *String) (out *StaticFile, err error)
}

func RegisterPBGOHelloService(srv *rpc.Server, x PBGOHelloServiceInterface) error {
	if _, ok := x.(*PBGOHelloServiceValidator); !ok {
		x = &PBGOHelloServiceValidator{PBGOHelloServiceInterface: x}
	}

	if err := srv.RegisterName("PBGOHelloService", x); err != nil {
		return err
	}
	return nil
}

type PBGOHelloServiceValidator struct {
	PBGOHelloServiceInterface
}

func (p *PBGOHelloServiceValidator) Hello(in *String, out *String) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.PBGOHelloServiceInterface.Hello(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

func (p *PBGOHelloServiceValidator) Echo(in *Message, out *Message) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.PBGOHelloServiceInterface.Echo(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

func (p *PBGOHelloServiceValidator) Static(in *String, out *StaticFile) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.PBGOHelloServiceInterface.Static(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

type PBGOHelloServiceClient struct {
	*rpc.Client
}

func DialPBGOHelloService(network, address string) (*PBGOHelloServiceClient, error) {
	c, err := rpc.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return &PBGOHelloServiceClient{Client: c}, nil
}

func (p *PBGOHelloServiceClient) Hello(in *String) (*String, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(String)
	if err := p.Client.Call("PBGOHelloService.Hello", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *PBGOHelloServiceClient) AsyncHello(in *String, out *String, done chan *rpc.Call) *rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &rpc.Call{
				ServiceMethod: "PBGOHelloService.Hello",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"PBGOHelloService.Hello",
		in, out,
		done,
	)
}

func (p *PBGOHelloServiceClient) Echo(in *Message) (*Message, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(Message)
	if err := p.Client.Call("PBGOHelloService.Echo", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *PBGOHelloServiceClient) AsyncEcho(in *Message, out *Message, done chan *rpc.Call) *rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &rpc.Call{
				ServiceMethod: "PBGOHelloService.Echo",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"PBGOHelloService.Echo",
		in, out,
		done,
	)
}

func (p *PBGOHelloServiceClient) Static(in *String) (*StaticFile, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(StaticFile)
	if err := p.Client.Call("PBGOHelloService.Static", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *PBGOHelloServiceClient) AsyncStatic(in *String, out *StaticFile, done chan *rpc.Call) *rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &rpc.Call{
				ServiceMethod: "PBGOHelloService.Static",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"PBGOHelloService.Static",
		in, out,
		done,
	)
}

func PBGOHelloServiceHandler(svc PBGOHelloServiceInterface) http.Handler {
	var router = httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("DELETE", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/hello/:value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("PATCH", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("POST", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/echo/:subfiled.value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   Message
				protoReply Message
			)

			for _, fieldPath := range re.FindAllString("/echo/:subfiled.value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := svc.Echo(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/static/:value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply StaticFile
			)

			for _, fieldPath := range re.FindAllString("/static/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := svc.Static(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			w.Header().Set("Content-Type", protoReply.ContentType)

			if _, err := w.Write(protoReply.ContentBody); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func PBGOHelloServiceGrpcHandler(ctx context.Context, svc PBGOHelloServiceGrpcInterface) http.Handler {
	var router = httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("DELETE", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/hello/:value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("PATCH", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("POST", "/hello",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if err := json.NewDecoder(r.Body).Decode(&protoReq); err != nil && err != io.EOF {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/echo/:subfiled.value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   Message
				protoReply *Message
				err        error
			)

			for _, fieldPath := range re.FindAllString("/echo/:subfiled.value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Echo(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := json.NewEncoder(w).Encode(&protoReply); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	router.Handle("GET", "/static/:value",
		func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
			var (
				protoReq   String
				protoReply *StaticFile
				err        error
			)

			for _, fieldPath := range re.FindAllString("/static/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if err := pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Static(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(pbgo.Error); ok {
					http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
			}

			w.Header().Set("Content-Type", protoReply.ContentType)

			if _, err := w.Write(protoReply.ContentBody); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_hello_c8da73ca06a54c79) }

var fileDescriptor_hello_c8da73ca06a54c79 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xd5, 0xc4, 0x49, 0xda, 0xde, 0xa4, 0x10, 0x46, 0x45, 0x8d, 0x0c, 0x42, 0xc1, 0x2b, 0x2f,
	0x90, 0x5d, 0x5c, 0x10, 0xc8, 0x1b, 0x44, 0x53, 0xd3, 0x0a, 0x05, 0x51, 0x39, 0xd9, 0x57, 0x7e,
	0x0c, 0xf1, 0x88, 0xc1, 0x63, 0x8d, 0xa7, 0x95, 0xfc, 0x91, 0xfc, 0x00, 0x4b, 0x3e, 0x20, 0x7f,
	0x50, 0x09, 0x8d, 0x1f, 0x89, 0x91, 0xbb, 0xc8, 0xce, 0xe7, 0xcc, 0x39, 0x67, 0xee, 0xbd, 0x73,
	0x0d, 0xa3, 0x84, 0x30, 0xc6, 0xad, 0x4c, 0x70, 0xc9, 0xf1, 0x61, 0x09, 0x6e, 0xb3, 0x50, 0x87,
	0x2c, 0x5c, 0xd7, 0xac, 0xf1, 0x0a, 0x86, 0x4b, 0x29, 0x68, 0xba, 0xc6, 0x27, 0x30, 0xb8, 0x0f,
	0xd8, 0x1d, 0x99, 0xa2, 0x19, 0x32, 0x8f, 0xfc, 0x0a, 0x18, 0x3e, 0xc0, 0x52, 0x06, 0x92, 0x46,
	0x5f, 0x28, 0x23, 0xf8, 0x35, 0x8c, 0x23, 0x9e, 0x4a, 0x92, 0xca, 0x5b, 0x59, 0x64, 0x8d, 0x74,
	0x54, 0x73, 0xab, 0x22, 0xfb, 0x4f, 0x12, 0xf2, 0xb8, 0x98, 0xf6, 0x66, 0xc8, 0x1c, 0x6f, 0x25,
	0x17, 0x3c, 0x2e, 0x8c, 0xdf, 0x08, 0x0e, 0xbe, 0x91, 0x3c, 0x0f, 0xd6, 0xe4, 0xf1, 0x5b, 0x15,
	0x1b, 0x08, 0x11, 0x28, 0xb7, 0x66, 0x0e, 0xfc, 0x0a, 0x60, 0x1b, 0xfa, 0x31, 0x8d, 0xe4, 0x54,
	0x9b, 0x69, 0xe6, 0xc8, 0x79, 0x61, 0x35, 0x0d, 0x59, 0x75, 0x98, 0x75, 0x49, 0x23, 0xe9, 0xa5,
	0x52, 0x14, 0x7e, 0x29, 0xc4, 0x6f, 0xe0, 0x30, 0xbf, 0x0b, 0x7f, 0x50, 0x46, 0xe2, 0x69, 0x7f,
	0x86, 0xcc, 0x91, 0x33, 0xd9, 0x99, 0xaa, 0xb6, 0xfd, 0xad, 0x42, 0xff, 0x00, 0x47, 0xdb, 0x00,
	0x3c, 0x01, 0xed, 0x27, 0x29, 0xea, 0xaa, 0xd4, 0xe7, 0xae, 0xd2, 0x5e, 0xab, 0x52, 0xb7, 0xf7,
	0x11, 0x39, 0x1b, 0x0d, 0xc6, 0xd7, 0x2a, 0x76, 0x49, 0xc4, 0x3d, 0x8d, 0x08, 0x66, 0x30, 0x28,
	0x31, 0xee, 0x5c, 0xa7, 0x77, 0x18, 0xe3, 0xd3, 0x9f, 0xcd, 0xc3, 0xc2, 0x85, 0x63, 0xbb, 0x3c,
	0xb0, 0xdd, 0x32, 0x57, 0x1f, 0x56, 0xd0, 0x99, 0xc0, 0xf0, 0xd2, 0x5b, 0x78, 0x2b, 0x0f, 0x37,
	0xcc, 0x53, 0x18, 0xdc, 0x7c, 0x5e, 0xcd, 0xaf, 0x1b, 0x02, 0x7f, 0x85, 0xbe, 0x17, 0x25, 0x1c,
	0x3f, 0xeb, 0x0c, 0x44, 0xef, 0x52, 0xc6, 0x4b, 0x75, 0xdd, 0x29, 0x3c, 0xb7, 0x49, 0x94, 0x70,
	0xdb, 0x6d, 0xba, 0xb7, 0xaa, 0xc1, 0x33, 0xb5, 0x0e, 0xea, 0xb9, 0x1f, 0x29, 0xfd, 0xa4, 0xcd,
	0x34, 0x2b, 0x61, 0xb8, 0x2a, 0xef, 0xbd, 0x73, 0x0e, 0xda, 0x95, 0xb7, 0xc2, 0x4f, 0xec, 0xbc,
	0x3c, 0x6a, 0xda, 0x38, 0x76, 0xdb, 0xfb, 0x62, 0xec, 0xa0, 0xda, 0x0d, 0xfc, 0x0e, 0xc6, 0x6a,
	0x64, 0x44, 0x2c, 0xa5, 0x20, 0xc1, 0xaf, 0x7d, 0xc6, 0x75, 0x86, 0x94, 0x6b, 0xce, 0x28, 0x49,
	0xe5, 0xfe, 0x2e, 0x13, 0xe1, 0xb7, 0x70, 0x30, 0x4f, 0x82, 0x34, 0x25, 0x6c, 0x3f, 0xc3, 0x19,
	0xd2, 0x4f, 0xff, 0x6e, 0x1e, 0x16, 0x18, 0x26, 0x37, 0x17, 0x57, 0xdf, 0xdb, 0xef, 0x1b, 0x0e,
	0xcb, 0x7f, 0xe7, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0x43, 0x54, 0xaf, 0x60, 0x03,
	0x00, 0x00,
}
